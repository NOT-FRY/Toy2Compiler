
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import tree_structure.*;
import tree_structure.Statement.*;
import tree_structure.Expression.*;
import java.util.ArrayList;
import scoping.Kind;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\006\004\000\002\010\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\011\005\000\002\011" +
    "\003\000\002\014\005\000\002\014\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\007\014\000\002\015" +
    "\006\000\002\015\002\000\002\020\007\000\002\020\002" +
    "\000\002\016\005\000\002\016\003\000\002\005\012\000" +
    "\002\021\006\000\002\021\002\000\002\022\007\000\002" +
    "\022\002\000\002\023\003\000\002\023\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\002\000\002\024\006" +
    "\000\002\024\004\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\026\006\000\002\026\005\000\002\025" +
    "\006\000\002\025\005\000\002\030\011\000\002\035\004" +
    "\000\002\035\002\000\002\033\006\000\002\037\004\000" +
    "\002\037\002\000\002\031\007\000\002\027\003\000\002" +
    "\027\010\000\002\027\007\000\002\027\002\000\002\034" +
    "\005\000\002\034\006\000\002\034\003\000\002\034\004" +
    "\000\002\032\005\000\002\032\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\004\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\004\005\016\011\023\ufffd\001\002\000" +
    "\004\002\312\001\002\000\004\062\161\001\002\000\010" +
    "\004\005\016\011\023\ufffd\001\002\000\010\004\005\016" +
    "\011\023\ufffd\001\002\000\004\023\230\001\002\000\004" +
    "\062\012\001\002\000\004\021\013\001\002\000\006\022" +
    "\uffe4\062\014\001\002\000\004\005\220\001\002\000\004" +
    "\022\016\001\002\000\004\017\017\001\002\000\012\011" +
    "\023\012\020\013\021\014\024\001\002\000\012\005\uffe9" +
    "\007\uffe9\010\uffe9\022\uffe9\001\002\000\012\005\uffe8\007" +
    "\uffe8\010\uffe8\022\uffe8\001\002\000\006\005\uffe0\010\216" +
    "\001\002\000\012\005\uffea\007\uffea\010\uffea\022\uffea\001" +
    "\002\000\012\005\uffe7\007\uffe7\010\uffe7\022\uffe7\001\002" +
    "\000\004\005\026\001\002\000\024\004\005\015\044\020" +
    "\uffd6\026\040\027\041\031\027\032\036\037\031\062\037" +
    "\001\002\000\030\007\uffbf\021\052\030\130\043\045\056" +
    "\060\062\057\063\050\064\046\065\056\066\051\067\054" +
    "\001\002\000\004\006\211\001\002\000\024\021\052\043" +
    "\045\056\060\062\057\063\050\064\046\065\056\066\051" +
    "\067\054\001\002\000\004\007\204\001\002\000\004\007" +
    "\203\001\002\000\004\007\202\001\002\000\036\004\005" +
    "\015\044\020\uffd6\024\uffd6\026\040\027\041\031\027\032" +
    "\036\034\uffd6\035\uffd6\036\uffd6\037\031\041\uffd6\062\037" +
    "\001\002\000\024\021\052\043\045\056\060\062\057\063" +
    "\050\064\046\065\056\066\051\067\054\001\002\000\010" +
    "\006\ufff2\010\145\021\146\001\002\000\030\007\uffbf\021" +
    "\052\030\130\043\045\056\060\062\057\063\050\064\046" +
    "\065\056\066\051\067\054\001\002\000\030\007\uffbf\021" +
    "\052\030\130\043\045\056\060\062\057\063\050\064\046" +
    "\065\056\066\051\067\054\001\002\000\036\004\005\015" +
    "\044\020\uffd6\024\uffd6\026\040\027\041\031\027\032\036" +
    "\034\uffd6\035\uffd6\036\uffd6\037\031\041\uffd6\062\037\001" +
    "\002\000\004\020\124\001\002\000\024\021\052\043\045" +
    "\056\060\062\057\063\050\064\046\065\056\066\051\067" +
    "\054\001\002\000\024\021\052\043\045\056\060\062\057" +
    "\063\050\064\046\065\056\066\051\067\054\001\002\000" +
    "\046\007\uffb7\010\uffb7\022\uffb7\030\uffb7\033\uffb7\040\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\001\002" +
    "\000\040\007\uffb9\010\121\022\uffb9\042\065\043\062\044" +
    "\072\045\070\046\066\047\073\050\074\051\067\052\071" +
    "\053\064\054\063\055\075\001\002\000\046\007\uffb5\010" +
    "\uffb5\022\uffb5\030\uffb5\033\uffb5\040\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002\000\046\007\uffb3" +
    "\010\uffb3\022\uffb3\030\uffb3\033\uffb3\040\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\001\002\000\024\021" +
    "\052\043\045\056\060\062\057\063\050\064\046\065\056" +
    "\066\051\067\054\001\002\000\004\007\116\001\002\000" +
    "\046\007\uffb2\010\uffb2\022\uffb2\030\uffb2\033\uffb2\040\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\001\002" +
    "\000\046\007\uffb8\010\uffb8\022\uffb8\030\uffb8\033\uffb8\040" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\001" +
    "\002\000\046\007\uffb6\010\uffb6\022\uffb6\030\uffb6\033\uffb6" +
    "\040\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\001\002\000\050\007\uffb4\010\uffb4\021\112\022\uffb4\030" +
    "\uffb4\033\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\001\002\000\024\021\052\043\045\056\060" +
    "\062\057\063\050\064\046\065\056\066\051\067\054\001" +
    "\002\000\046\007\uffa3\010\uffa3\022\uffa3\030\uffa3\033\uffa3" +
    "\040\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\001\002\000\024\021\052\043\045\056\060\062\057\063" +
    "\050\064\046\065\056\066\051\067\054\001\002\000\024" +
    "\021\052\043\045\056\060\062\057\063\050\064\046\065" +
    "\056\066\051\067\054\001\002\000\024\021\052\043\045" +
    "\056\060\062\057\063\050\064\046\065\056\066\051\067" +
    "\054\001\002\000\024\021\052\043\045\056\060\062\057" +
    "\063\050\064\046\065\056\066\051\067\054\001\002\000" +
    "\024\021\052\043\045\056\060\062\057\063\050\064\046" +
    "\065\056\066\051\067\054\001\002\000\024\021\052\043" +
    "\045\056\060\062\057\063\050\064\046\065\056\066\051" +
    "\067\054\001\002\000\024\021\052\043\045\056\060\062" +
    "\057\063\050\064\046\065\056\066\051\067\054\001\002" +
    "\000\024\021\052\043\045\056\060\062\057\063\050\064" +
    "\046\065\056\066\051\067\054\001\002\000\024\021\052" +
    "\043\045\056\060\062\057\063\050\064\046\065\056\066" +
    "\051\067\054\001\002\000\024\021\052\043\045\056\060" +
    "\062\057\063\050\064\046\065\056\066\051\067\054\001" +
    "\002\000\024\021\052\043\045\056\060\062\057\063\050" +
    "\064\046\065\056\066\051\067\054\001\002\000\024\021" +
    "\052\043\045\056\060\062\057\063\050\064\046\065\056" +
    "\066\051\067\054\001\002\000\046\007\uffac\010\uffac\022" +
    "\uffac\030\uffac\033\uffac\040\uffac\042\065\043\062\044\072" +
    "\045\070\046\066\047\073\050\074\051\067\052\071\053" +
    "\064\054\063\055\uffac\001\002\000\032\007\uffa9\010\uffa9" +
    "\022\uffa9\030\uffa9\033\uffa9\040\uffa9\042\065\043\062\044" +
    "\072\045\070\054\uffa9\055\uffa9\001\002\000\032\007\uffa6" +
    "\010\uffa6\022\uffa6\030\uffa6\033\uffa6\040\uffa6\042\065\043" +
    "\062\044\072\045\070\054\uffa6\055\uffa6\001\002\000\046" +
    "\007\uffaf\010\uffaf\022\uffaf\030\uffaf\033\uffaf\040\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002\000" +
    "\032\007\uffab\010\uffab\022\uffab\030\uffab\033\uffab\040\uffab" +
    "\042\065\043\062\044\072\045\070\054\uffab\055\uffab\001" +
    "\002\000\046\007\uffae\010\uffae\022\uffae\030\uffae\033\uffae" +
    "\040\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\001\002\000\032\007\uffa8\010\uffa8\022\uffa8\030\uffa8\033" +
    "\uffa8\040\uffa8\042\065\043\062\044\072\045\070\054\uffa8" +
    "\055\uffa8\001\002\000\032\007\uffa7\010\uffa7\022\uffa7\030" +
    "\uffa7\033\uffa7\040\uffa7\042\065\043\062\044\072\045\070" +
    "\054\uffa7\055\uffa7\001\002\000\046\007\uffb1\010\uffb1\022" +
    "\uffb1\030\uffb1\033\uffb1\040\uffb1\042\uffb1\043\uffb1\044\072" +
    "\045\070\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\001\002\000\032\007\uffaa\010\uffaa" +
    "\022\uffaa\030\uffaa\033\uffaa\040\uffaa\042\065\043\062\044" +
    "\072\045\070\054\uffaa\055\uffaa\001\002\000\046\007\uffad" +
    "\010\uffad\022\uffad\030\uffad\033\uffad\040\uffad\042\065\043" +
    "\062\044\072\045\070\046\066\047\073\050\074\051\067" +
    "\052\071\053\064\054\uffad\055\uffad\001\002\000\046\007" +
    "\uffb0\010\uffb0\022\uffb0\030\uffb0\033\uffb0\040\uffb0\042\uffb0" +
    "\043\uffb0\044\072\045\070\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\001\002\000\026" +
    "\021\052\022\114\043\045\056\060\062\057\063\050\064" +
    "\046\065\056\066\051\067\054\001\002\000\004\022\115" +
    "\001\002\000\046\007\uffcc\010\uffcc\022\uffcc\030\uffcc\033" +
    "\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\001\002\000\046\007\uffcd\010\uffcd\022\uffcd\030\uffcd" +
    "\033\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\001\002\000\036\004\uffd3\015\uffd3\020\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\041\uffd3\062\uffd3\001\002\000\034\022" +
    "\120\042\065\043\062\044\072\045\070\046\066\047\073" +
    "\050\074\051\067\052\071\053\064\054\063\055\075\001" +
    "\002\000\046\007\uffa5\010\uffa5\022\uffa5\030\uffa5\033\uffa5" +
    "\040\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\001\002\000\024\021\052\043\045\056\060\062\057\063" +
    "\050\064\046\065\056\066\051\067\054\001\002\000\006" +
    "\007\uffba\022\uffba\001\002\000\046\007\uffa4\010\uffa4\022" +
    "\uffa4\030\uffa4\033\uffa4\040\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\001\002\000\012\002\uffe6\004\uffe6" +
    "\016\uffe6\023\uffe6\001\002\000\016\020\uffd7\024\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\041\uffd7\001\002\000\036\007\uffc2" +
    "\030\136\042\065\043\062\044\072\045\070\046\066\047" +
    "\073\050\074\051\067\052\071\053\064\054\063\055\075" +
    "\001\002\000\004\007\135\001\002\000\004\021\131\001" +
    "\002\000\024\021\052\043\045\056\060\062\057\063\050" +
    "\064\046\065\056\066\051\067\054\001\002\000\034\022" +
    "\133\042\065\043\062\044\072\045\070\046\066\047\073" +
    "\050\074\051\067\052\071\053\064\054\063\055\075\001" +
    "\002\000\030\007\uffbf\021\052\030\130\043\045\056\060" +
    "\062\057\063\050\064\046\065\056\066\051\067\054\001" +
    "\002\000\004\007\uffc0\001\002\000\036\004\uffd1\015\uffd1" +
    "\020\uffd1\024\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\062\uffd1\001\002" +
    "\000\004\021\137\001\002\000\024\021\052\043\045\056" +
    "\060\062\057\063\050\064\046\065\056\066\051\067\054" +
    "\001\002\000\034\022\141\042\065\043\062\044\072\045" +
    "\070\046\066\047\073\050\074\051\067\052\071\053\064" +
    "\054\063\055\075\001\002\000\030\007\uffbf\021\052\030" +
    "\130\043\045\056\060\062\057\063\050\064\046\065\056" +
    "\066\051\067\054\001\002\000\004\007\uffc1\001\002\000" +
    "\004\007\144\001\002\000\036\004\uffd2\015\uffd2\020\uffd2" +
    "\024\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\041\uffd2\062\uffd2\001\002\000\004" +
    "\062\161\001\002\000\030\021\052\022\152\043\045\056" +
    "\060\060\151\062\057\063\050\064\046\065\056\066\051" +
    "\067\054\001\002\000\004\022\160\001\002\000\036\010" +
    "\156\022\uffbc\042\065\043\062\044\072\045\070\046\066" +
    "\047\073\050\074\051\067\052\071\053\064\054\063\055" +
    "\075\001\002\000\004\062\153\001\002\000\004\007\uffca" +
    "\001\002\000\006\010\154\022\uffbb\001\002\000\026\021" +
    "\052\043\045\056\060\060\151\062\057\063\050\064\046" +
    "\065\056\066\051\067\054\001\002\000\004\022\uffbd\001" +
    "\002\000\026\021\052\043\045\056\060\060\151\062\057" +
    "\063\050\064\046\065\056\066\051\067\054\001\002\000" +
    "\004\022\uffbe\001\002\000\004\007\uffcb\001\002\000\010" +
    "\005\ufff2\006\ufff2\010\145\001\002\000\006\005\ufff3\006" +
    "\ufff3\001\002\000\034\033\164\042\065\043\062\044\072" +
    "\045\070\046\066\047\073\050\074\051\067\052\071\053" +
    "\064\054\063\055\075\001\002\000\030\004\005\015\044" +
    "\026\040\027\041\031\027\032\036\034\uffd6\035\uffd6\036" +
    "\uffd6\037\031\062\037\001\002\000\010\034\uffc7\035\uffc7" +
    "\036\167\001\002\000\006\034\175\035\uffc4\001\002\000" +
    "\024\021\052\043\045\056\060\062\057\063\050\064\046" +
    "\065\056\066\051\067\054\001\002\000\010\034\uffc7\035" +
    "\uffc7\036\167\001\002\000\006\034\uffc8\035\uffc8\001\002" +
    "\000\034\033\173\042\065\043\062\044\072\045\070\046" +
    "\066\047\073\050\074\051\067\052\071\053\064\054\063" +
    "\055\075\001\002\000\030\004\005\015\044\026\040\027" +
    "\041\031\027\032\036\034\uffd6\035\uffd6\036\uffd6\037\031" +
    "\062\037\001\002\000\010\034\uffc6\035\uffc6\036\uffc6\001" +
    "\002\000\024\004\005\015\044\026\040\027\041\031\027" +
    "\032\036\035\uffd6\037\031\062\037\001\002\000\004\035" +
    "\177\001\002\000\004\007\uffc9\001\002\000\004\035\uffc5" +
    "\001\002\000\016\020\uffd8\024\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\041\uffd8\001\002\000\036\004\uffcf\015\uffcf\020\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\041\uffcf\062\uffcf\001\002\000\036" +
    "\004\uffd4\015\uffd4\020\uffd4\024\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4" +
    "\062\uffd4\001\002\000\036\004\uffce\015\uffce\020\uffce\024" +
    "\uffce\026\uffce\027\uffce\031\uffce\032\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\041\uffce\062\uffce\001\002\000\034\040" +
    "\206\042\065\043\062\044\072\045\070\046\066\047\073" +
    "\050\074\051\067\052\071\053\064\054\063\055\075\001" +
    "\002\000\024\004\005\015\044\026\040\027\041\031\027" +
    "\032\036\037\031\041\uffd6\062\037\001\002\000\004\041" +
    "\210\001\002\000\004\007\uffc3\001\002\000\024\021\052" +
    "\043\045\056\060\062\057\063\050\064\046\065\056\066" +
    "\051\067\054\001\002\000\004\007\213\001\002\000\036" +
    "\004\uffd5\015\uffd5\020\uffd5\024\uffd5\026\uffd5\027\uffd5\031" +
    "\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5" +
    "\062\uffd5\001\002\000\004\007\215\001\002\000\036\004" +
    "\uffd0\015\uffd0\020\uffd0\024\uffd0\026\uffd0\027\uffd0\031\uffd0" +
    "\032\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\062" +
    "\uffd0\001\002\000\012\011\023\012\020\013\021\014\024" +
    "\001\002\000\004\005\uffe1\001\002\000\012\011\023\012" +
    "\020\013\021\014\024\001\002\000\006\010\222\022\uffe2" +
    "\001\002\000\004\062\224\001\002\000\004\022\uffe5\001" +
    "\002\000\004\005\225\001\002\000\012\011\023\012\020" +
    "\013\021\014\024\001\002\000\006\010\222\022\uffe2\001" +
    "\002\000\004\022\uffe3\001\002\000\004\062\241\001\002" +
    "\000\012\002\ufff9\004\005\016\011\023\230\001\002\000" +
    "\012\002\ufff9\004\005\016\011\023\230\001\002\000\012" +
    "\002\ufff9\004\005\016\011\023\230\001\002\000\004\002" +
    "\000\001\002\000\012\002\ufff9\004\005\016\011\023\230" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufffb\001\002\000\004\021\242\001\002" +
    "\000\010\022\uffdd\025\244\062\243\001\002\000\004\005" +
    "\uffda\001\002\000\004\062\263\001\002\000\004\022\257" +
    "\001\002\000\004\005\247\001\002\000\012\011\023\012" +
    "\020\013\021\014\024\001\002\000\006\010\251\022\uffdb" +
    "\001\002\000\006\025\244\062\243\001\002\000\004\022" +
    "\uffde\001\002\000\004\005\254\001\002\000\012\011\023" +
    "\012\020\013\021\014\024\001\002\000\006\010\251\022" +
    "\uffdb\001\002\000\004\022\uffdc\001\002\000\004\005\260" +
    "\001\002\000\024\004\005\015\044\024\uffd6\026\040\027" +
    "\041\031\027\032\036\037\031\062\037\001\002\000\004" +
    "\024\262\001\002\000\012\002\uffdf\004\uffdf\016\uffdf\023" +
    "\uffdf\001\002\000\004\005\uffd9\001\002\000\004\023\uffff" +
    "\001\002\000\004\023\ufffe\001\002\000\006\005\270\006" +
    "\271\001\002\000\044\002\ufff8\004\ufff8\015\ufff8\016\ufff8" +
    "\020\ufff8\023\ufff8\024\ufff8\026\ufff8\027\ufff8\031\ufff8\032" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\062\ufff8" +
    "\001\002\000\012\011\023\012\020\013\021\014\024\001" +
    "\002\000\014\063\272\064\276\065\273\066\275\067\277" +
    "\001\002\000\006\007\uffed\010\uffed\001\002\000\006\007" +
    "\uffee\010\uffee\001\002\000\004\007\303\001\002\000\006" +
    "\007\uffec\010\uffec\001\002\000\006\007\uffef\010\uffef\001" +
    "\002\000\006\007\uffeb\010\uffeb\001\002\000\006\007\ufff0" +
    "\010\301\001\002\000\014\063\272\064\276\065\273\066" +
    "\275\067\277\001\002\000\004\007\ufff1\001\002\000\006" +
    "\057\305\062\161\001\002\000\044\002\ufff6\004\ufff6\015" +
    "\ufff6\016\ufff6\020\ufff6\023\ufff6\024\ufff6\026\ufff6\027\ufff6" +
    "\031\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\041" +
    "\ufff6\062\ufff6\001\002\000\044\002\ufff4\004\ufff4\015\ufff4" +
    "\016\ufff4\020\ufff4\023\ufff4\024\ufff4\026\ufff4\027\ufff4\031" +
    "\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4" +
    "\062\ufff4\001\002\000\004\007\307\001\002\000\006\057" +
    "\311\062\161\001\002\000\044\002\ufff7\004\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\031" +
    "\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\041\ufff7" +
    "\062\ufff7\001\002\000\044\002\ufff5\004\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5\031\ufff5" +
    "\032\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5\062" +
    "\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\012\002\003\003\007\006\006\007\005\001" +
    "\001\000\002\001\001\000\006\010\266\011\265\001\001" +
    "\000\010\003\264\006\006\007\005\001\001\000\010\003" +
    "\263\006\006\007\005\001\001\000\004\005\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\021\016\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\034\011\027\017" +
    "\042\024\041\025\032\030\033\031\031\001\001\000\010" +
    "\026\054\027\213\036\125\001\001\000\002\001\001\000" +
    "\006\026\054\036\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\034\011\027\017" +
    "\200\024\041\025\032\030\033\031\031\001\001\000\006" +
    "\026\054\036\162\001\001\000\002\001\001\000\010\026" +
    "\054\027\142\036\125\001\001\000\010\026\054\027\126" +
    "\036\125\001\001\000\020\006\034\011\027\017\124\024" +
    "\041\025\032\030\033\031\031\001\001\000\002\001\001" +
    "\000\010\026\054\032\052\036\046\001\001\000\006\026" +
    "\054\036\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\054\036" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\054\036\060\001\001\000\002\001\001\000\006\026\054" +
    "\036\110\001\001\000\006\026\054\036\107\001\001\000" +
    "\006\026\054\036\106\001\001\000\006\026\054\036\105" +
    "\001\001\000\006\026\054\036\104\001\001\000\006\026" +
    "\054\036\103\001\001\000\006\026\054\036\102\001\001" +
    "\000\006\026\054\036\101\001\001\000\006\026\054\036" +
    "\100\001\001\000\006\026\054\036\077\001\001\000\006" +
    "\026\054\036\076\001\001\000\006\026\054\036\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\054\032\112\036\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\054\032\121\036\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\054\036\131\001\001\000" +
    "\002\001\001\000\010\026\054\027\133\036\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\054\036\137\001\001\000\002\001\001\000\010" +
    "\026\054\027\141\036\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\161\001\001" +
    "\000\010\026\054\034\146\036\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\054\034\154\036\147\001" +
    "\001\000\002\001\001\000\010\026\054\034\156\036\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\034" +
    "\011\027\017\164\024\041\025\032\030\033\031\031\001" +
    "\001\000\006\033\167\035\165\001\001\000\004\037\175" +
    "\001\001\000\006\026\054\036\171\001\001\000\006\033" +
    "\167\035\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\034\011\027\017\173\024\041\025\032\030" +
    "\033\031\031\001\001\000\002\001\001\000\020\006\034" +
    "\011\027\017\177\024\041\025\032\030\033\031\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\034\011\027" +
    "\017\206\024\041\025\032\030\033\031\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\054\032\211" +
    "\036\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\021\016\216" +
    "\001\001\000\002\001\001\000\004\012\220\001\001\000" +
    "\004\020\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\225\001\001\000\004\020" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\233\005\234\006\232\007\231\001\001\000\012\004" +
    "\237\005\234\006\232\007\231\001\001\000\012\004\236" +
    "\005\234\006\232\007\231\001\001\000\002\001\001\000" +
    "\012\004\235\005\234\006\232\007\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\244\023\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\247\001\001\000\004\022\251\001\001\000\004" +
    "\023\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\254\001\001\000\004\022\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\034\011\027\017" +
    "\260\024\041\025\032\030\033\031\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\305\001\001\000\006\013\277\014\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\277\014\301\001\001\000\002" +
    "\001\001\000\006\010\303\011\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\307" +
    "\011\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Iter1 Procedure Iter2 
            {
              Object RESULT =null;
		int listIter1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listIter1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object listIter1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainProcedure = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listIter2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listIter2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object listIter2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            ArrayList<VarDeclOp> varDeclOpListIter1 = ((IterOp)listIter1).getVarDeclList();
                                            ArrayList<FunctionOrProcedure> functionOrProcedureListIter1 = ((IterOp)listIter1).getFunProcList();

                                            ProgramOp program = new ProgramOp(varDeclOpListIter1,functionOrProcedureListIter1);
                                            program.addFunctionOrProcedure((FunctionOrProcedure)mainProcedure);//abbiamo deciso di inserire la procedura nella lista, senza creare un nuovo campo

                                            ArrayList<VarDeclOp> varDeclOpListIter2 = ((IterOp)listIter2).getVarDeclList();
                                            ArrayList<FunctionOrProcedure> functionOrProcedureListIter2 = ((IterOp)listIter2).getFunProcList();
                                            for(VarDeclOp v : varDeclOpListIter2 ){
                                                program.addVarDecl((VarDeclOp)v);
                                            }
                                            for(FunctionOrProcedure f : functionOrProcedureListIter2){
                                                program.addFunctionOrProcedure((FunctionOrProcedure)f);
                                            }
                                            RESULT = program;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter1 ::= VarDecl Iter1 
            {
              Object RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        for(VarDeclOp v : (ArrayList<VarDeclOp>) varDecls)
                                            ((IterOp)iter).addVarDecl((VarDeclOp)v);
                                        RESULT = iter;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter1 ::= Function Iter1 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((IterOp)iter).addFunctionOrProcedure((FunctionOrProcedure)function); RESULT = iter;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter1 ::= 
            {
              Object RESULT =null;
		 RESULT = new IterOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter2 ::= VarDecl Iter2 
            {
              Object RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        for(VarDeclOp v : (ArrayList<VarDeclOp>) varDecls)
                                            ((IterOp)iter).addVarDecl((VarDeclOp)v);
                                        RESULT = iter;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter2 ::= Function Iter2 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((IterOp)iter).addFunctionOrProcedure((FunctionOrProcedure)function); RESULT = iter;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter2 ::= Procedure Iter2 
            {
              Object RESULT =null;
		int procedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object procedure = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((IterOp)iter).addFunctionOrProcedure((FunctionOrProcedure)procedure); RESULT = iter;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter2 ::= 
            {
              Object RESULT =null;
		 RESULT = new IterOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              Object RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = decls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        ArrayList<IdentifierExpression> idExpList = new ArrayList<IdentifierExpression>();
                                        for(Identifier id : (ArrayList<Identifier>)idList){
                                            idExpList.add(new IdentifierExpression(id,null));
                                        }
                                        VarDeclOp decl = new VarDeclOp(idExpList,(Type)type,DeclarationType.DECLARATION);
                                       ((ArrayList<VarDeclOp>)declsList).add(0,(VarDeclOp)decl);
                                        RESULT = declsList;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object constList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  	                                                        int i=0;
  	                                                        int j=0;
  	                                                        ArrayList<IdentifierExpression> idExpList = new ArrayList<IdentifierExpression>();
  	                                                        for(i=0,j=0;i<((ArrayList<Identifier>)idList).size() && j<((ArrayList<Expression>)constList).size(); i++,j++){
  	                                                            Identifier id = ((ArrayList<Identifier>)idList).get(i);
  	                                                            Expression e = ((ArrayList<Expression>)constList).get(j);
  	                                                            //devo fondere le due liste in un' unica lista di IdentifierExpression, nell'ordine in cui mi sono state date
  	                                                            IdentifierExpression ie = new IdentifierExpression(id,e);
  	                                                            idExpList.add(ie);
  	                                                        }
  	                                                        //finisco di svuotare le liste
  	                                                        if(i<((ArrayList<Identifier>)idList).size() || j<((ArrayList<Expression>)constList).size()){
  	                                                            if(i<((ArrayList<Identifier>)idList).size()){
  	                                                                for(;i<((ArrayList<Identifier>)idList).size();i++){
  	                                                                    idExpList.add(new IdentifierExpression(((ArrayList<Identifier>)idList).get(i),null));
  	                                                                }
  	                                                            }
  	                                                            if(j<((ArrayList<Expression>)constList).size()){
  	                                                                for(; j<((ArrayList<Expression>)constList).size();j++){
  	                                                                    idExpList.add(new IdentifierExpression(null,((ArrayList<Expression>)constList).get(j)));
  	                                                                }
  	                                                            }
  	                                                        }
                                                            VarDeclOp decl = new VarDeclOp(idExpList,null,DeclarationType.INITIALIZATION);

                                                            ((ArrayList<VarDeclOp>)declsList).add(0,decl);
                                                            RESULT = declsList;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                        ArrayList<IdentifierExpression> idExpList = new ArrayList<IdentifierExpression>();
                                        for(Identifier id : (ArrayList<Identifier>)idList){
                                            idExpList.add(new IdentifierExpression(id,null));
                                        }
  	                                    ArrayList<VarDeclOp> decls = new ArrayList<VarDeclOp>();
                                        decls.add(new VarDeclOp(idExpList,(Type)type,DeclarationType.DECLARATION));
                                        RESULT = decls;
  	                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object constList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                    int i=0;
                                    int j=0;
                                    ArrayList<IdentifierExpression> idExpList = new ArrayList<IdentifierExpression>();
                                    for(i=0,j=0;i<((ArrayList<Identifier>)idList).size() && j<((ArrayList<Expression>)constList).size(); i++,j++){
                                        Identifier id = ((ArrayList<Identifier>)idList).get(i);
                                        Expression e = ((ArrayList<Expression>)constList).get(j);
                                        //devo fondere le due liste in un' unica lista di IdentifierExpression, nell'ordine in cui mi sono state date
                                        IdentifierExpression ie = new IdentifierExpression(id,e);
                                        idExpList.add(ie);
                                    }
                                    //finisco di svuotare le liste
                                    if(i<((ArrayList<Identifier>)idList).size() || j<((ArrayList<Expression>)constList).size()){
                                        if(i<((ArrayList<Identifier>)idList).size()){
                                            for(;i<((ArrayList<Identifier>)idList).size();i++){
                                                idExpList.add(new IdentifierExpression(((ArrayList<Identifier>)idList).get(i),null));
                                            }
                                        }
                                        if(j<((ArrayList<Expression>)constList).size()){
                                            for(; j<((ArrayList<Expression>)constList).size();j++){
                                                idExpList.add(new IdentifierExpression(null,((ArrayList<Expression>)constList).get(j)));
                                            }
                                        }
                                    }


                                    ArrayList<VarDeclOp> decls = new ArrayList<VarDeclOp>();
                                    decls.add(new VarDeclOp(idExpList,null,DeclarationType.INITIALIZATION));
                                    RESULT = decls;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ((ArrayList<Identifier>)idList).add(0,new Identifier(id,Kind.VAR));
                            RESULT = idList;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Identifier> idList = new ArrayList<Identifier>();
            	            idList.add(new Identifier(id,Kind.VAR));
            	            RESULT = idList;
            	           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ((ArrayList<Expression>)constsList).add(0,(Expression)c);
                            RESULT= constsList;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expression> constsList = new ArrayList<Expression>();
  	            constsList.add((Expression)c);
  	            RESULT = constsList;
  	           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Real_const(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer_const(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String_const(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Object RESULT =null;
		RESULT = new True_const(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Object RESULT =null;
		RESULT = new False_const(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= REAL 
            {
              Object RESULT =null;
		 RESULT = Type.REAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = Type.INTEGER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = Type.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunctionOp(new Identifier(id,Kind.METHOD),(ArrayList<ProcFunParamOp>) params,(ArrayList<Type>) types,(BodyOp) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                ProcFunParamOp funParamOp = new ProcFunParamOp(new Identifier(id,Qualifier.IN,Kind.VAR),(Type)type);
                                                                ((ArrayList<ProcFunParamOp>)params).add(0,funParamOp);
                                                                RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object otherParams = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                ProcFunParamOp funParamOp = new ProcFunParamOp(new Identifier(id, Qualifier.IN,Kind.VAR),(Type)type);
                                                ((ArrayList<ProcFunParamOp>)otherParams).add(0,funParamOp);
                                                RESULT = otherParams;
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OtherFuncParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Types ::= Type COMMA Types 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Type>)typeList).add(0,(Type) type);
                                             RESULT = typeList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Types ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Type> typeList = new ArrayList<Type>();
  	        typeList.add((Type)type);
  	        RESULT = typeList;
  	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ProcedureOp(new Identifier(id,Kind.METHOD),(ArrayList<ProcFunParamOp>)params,(BodyOp)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ProcFunParamOp procParam = new ProcFunParamOp((Identifier)id,(Type)type);
                                        ((ArrayList<ProcFunParamOp>)params).add(0,procParam);
                                        RESULT = params;
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<ProcFunParamOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object otherParams = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ProcFunParamOp procParam = new ProcFunParamOp((Identifier)id,(Type)type);
                                         ((ArrayList<ProcFunParamOp>)otherParams).add(0,procParam);
                                         RESULT = otherParams;
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherProcParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id,Qualifier.INOUT,Kind.VAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ProcParamId ::= OUT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier(id,Qualifier.OUT,Kind.VAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              Object RESULT =null;
		int vardeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vardecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        for(VarDeclOp v : (ArrayList<VarDeclOp>)vardecls ){
                                            ((BodyOp)body).addVarDecl((VarDeclOp)v);
                                        }
                                      RESULT = body;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                ((BodyOp)body).addStatement((Statement)statement);
  	                             RESULT = body;
  	                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              Object RESULT =null;
		RESULT = new BodyOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStatement((ArrayList<Identifier>)idList,(ArrayList<Expression>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              Object RESULT =null;
		int procCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object procCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = (ProcCallOp) procCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStatement((ArrayList<Expression>)exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              Object RESULT =null;
		int IOArgsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int IOArgsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object IOArgsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteStatement(WritingType.WRITE, (ArrayList<Expression>)IOArgsList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Object RESULT =null;
		int IOArgsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int IOArgsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object IOArgsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteStatement(WritingType.WRITE_RETURN, (ArrayList<Expression>)IOArgsList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              Object RESULT =null;
		int IOArgsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int IOArgsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object IOArgsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStatement((ArrayList<Expression>)IOArgsList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              Object RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ifStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = (IfStatement) ifStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              Object RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object whileStat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = (WhileStatement) whileStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expressionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expressions = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCallOp(new Identifier(id,Kind.METHOD),(ArrayList<Expression>) expressions); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunCallOp(new Identifier(id,Kind.METHOD)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int procedureExpressionListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procedureExpressionListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object procedureExpressionList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcCallOp(new Identifier(id,Kind.METHOD),(ArrayList<ProcedureExpression>)procedureExpressionList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ProcCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcCallOp(new Identifier(id,Kind.METHOD));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elifs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elseBody = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatement((Expression)expr,(BodyOp) body,(ArrayList<ElifOp>)elifs,(ElseOp)elseBody);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Elifs ::= Elif Elifs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elifsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ElifOp>)elifsList).add(0,(ElifOp)e); RESULT = elifsList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Elifs ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<ElifOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Elif ::= ELIF Expr THEN Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElifOp((Expression)expr,(BodyOp)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Else ::= ELSE Body 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseOp((BodyOp)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Else ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileStatement((Expression)expr,(BodyOp)body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOArgs ::= Expr 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               IOArg arg = new IOArg((Expression)expression,false);
                               ArrayList<IOArg> argsList = new ArrayList<IOArg>();
                               argsList.add(arg);
                               RESULT = argsList;
                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOArgs ::= Expr DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              Object RESULT =null;
		int expression1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expression1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object expression1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expression2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expression2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expression2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int IOArgsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int IOArgsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object IOArgsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                    IOArg arg1 = new IOArg((Expression)expression1,false);
                                                                                    ((ArrayList<IOArg>)IOArgsList).add(0,arg1);
                                                                                    IOArg arg2 = new IOArg((Expression)expression2,true);
                                                                                    ((ArrayList<IOArg>)IOArgsList).add(0,arg2);
                                                                                    RESULT = IOArgsList;
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int IOArgsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int IOArgsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object IOArgsList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                    IOArg arg = new IOArg((Expression)expression,true);
                                                                    ((ArrayList<IOArg>)IOArgsList).add(0,arg);
                                                                    RESULT = IOArgsList;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IOArgs ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<IOArg>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procedureExpressionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procedureExpressionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object procedureExpressions = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                        ProcedureExpression pe = new ProcedureExpression((Expression)expression,false,null);
                                                                        ((ArrayList<ProcedureExpression>)procedureExpressions).add(0,pe);
                                                                        RESULT = procedureExpressions;
                                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procedureExpressionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procedureExpressionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object procedureExpressions = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            ProcedureExpression pe = new ProcedureExpression(null,true,new Identifier(id,Kind.VAR));
  	                                                        ((ArrayList<ProcedureExpression>)procedureExpressions).add(0,pe);
  	                                                        RESULT = procedureExpressions;
  	                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ProcExprs ::= Expr 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<ProcedureExpression> PEList = new ArrayList<ProcedureExpression>();
                        ProcedureExpression pe = new ProcedureExpression((Expression)expression,false,null);
                        PEList.add(pe);
                        RESULT = PEList;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ProcExprs ::= REF ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<ProcedureExpression> PEList = new ArrayList<ProcedureExpression>();
                        ProcedureExpression pe = new ProcedureExpression(null,true,new Identifier(id,Kind.VAR));
                        PEList.add(pe);
                        RESULT = PEList;
  	               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<Expression>)exprList).add(0,(Expression)e); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expression> exprList = new ArrayList<Expression>();
                exprList.add((Expression)e);
                RESULT = exprList;
  	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Real_const(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer_const(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String_const(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ID 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier(value,Kind.VAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= TRUE 
            {
              Object RESULT =null;
		RESULT = new True_const(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= FALSE 
            {
              Object RESULT =null;
		RESULT = new False_const(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AddOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DiffOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MulOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DivOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AndOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OrOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new GTOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new GEOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LTOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LEOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new EQOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NEOp((Expression)e1,(Expression)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = (Expression) e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UminusOp((Expression)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NotOp((Expression)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
